name: ci
on: [push, pull_request]
jobs:
  run:
    name: build
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: build
        run: |
          (cd amd && npm i && npx tsc --sourcemap --module amd app.ts)
          (cd d3 && npm i && npx tsc --sourcemap data.ts)
          (cd greeter && npm i && npx tsc --sourcemap greeter.ts)
          (cd interfaces && npm i && npx tsc --sourcemap interfaces.ts)
          (cd jquery && npm i && npx tsc --sourcemap --target ES5 parallax.ts)
          (cd mankala && npm i && npx tsc --sourcemap --out mankalagame.js Driver.ts)
          (cd node && npm i && npx tsc --sourcemap --module commonjs  src/HttpServer.ts)
          (cd node && npm i && npx tsc --sourcemap --module commonjs  src/TcpServer.ts)
          (cd raytracer && npm i && npx tsc --sourcemap  raytracer.ts)
          (cd simple && npm i && npx tsc --sourcemap  animals.ts)
          (cd todomvc && npm i && npx tsc --sourcemap  js/todos.ts)
          (cd warship && npm i && npx tsc --sourcemap --target ES6 warship.ts)
        shell: bash

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          security-checks: 'vuln,config,secret'
          hide-progress: false
          format: 'table'
          # Customizing which severities are scanned for is done by adding the following flag: severity: 'UNKNOWN','LOW','MEDIUM','HIGH','CRITICAL'
        env:
          AQUA_KEY: ${{ secrets.AQUA_KEY }}
          AQUA_SECRET: ${{ secrets.AQUA_SECRET }}
          TRIVY_RUN_AS_PLUGIN: 'aqua'
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Snapshots
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'github'
          output: 'dependency-results.sbom.json'
          image-ref: '.'
          github-pat: '<github_pat_token>'